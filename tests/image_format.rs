// SPDX-FileCopyrightText: 2024 Shun Sakai
//
// SPDX-License-Identifier: GPL-3.0-or-later

// Lint levels of rustc.
#![forbid(unsafe_code)]
#![deny(missing_debug_implementations)]
#![warn(rust_2018_idioms)]
// Lint levels of Clippy.
#![warn(clippy::cargo, clippy::nursery, clippy::pedantic)]
#![allow(clippy::multiple_crate_versions)]

mod utils;

use predicates::prelude::predicate;

#[test]
fn generate_from_non_image_file() {
    let out_dir = tempfile::tempdir().unwrap();
    let out_dir = out_dir.path();
    utils::command::command()
        .arg("-o")
        .arg(out_dir)
        .arg("--filter")
        .arg("nearest")
        .arg("data/output/site.webmanifest")
        .assert()
        .failure()
        .code(69)
        .stderr(predicate::str::contains(
            "could not determine the image format",
        ));
}

#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_bmp() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.bmp")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.bmp"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("bmp")
            .arg("data/input/input.bmp")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("bmp")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "dds")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_dds() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.dds")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.dds"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("dds")
            .arg("data/input/input.dds")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("dds")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "ff")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_farbfeld() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.ff")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.ff"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("farbfeld")
            .arg("data/input/input.ff")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("farbfeld")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "gif")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_gif() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.gif")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.gif"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("gif")
            .arg("data/input/input.gif")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("gif")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "hdr")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_hdr() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.hdr")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.hdr"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("hdr")
            .arg("data/input/input.hdr")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("hdr")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[test]
fn generate_from_cur() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.cur")
            .assert()
            .success();
        assert!(out_dir.join("android-chrome-192x192.png").exists());
        assert!(out_dir.join("android-chrome-512x512.png").exists());
        assert!(out_dir.join("apple-touch-icon.png").exists());
        assert!(out_dir.join("favicon-16x16.png").exists());
        assert!(out_dir.join("favicon-32x32.png").exists());
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.cur"))
            .assert()
            .success();
        assert!(out_dir.join("android-chrome-192x192.png").exists());
        assert!(out_dir.join("android-chrome-512x512.png").exists());
        assert!(out_dir.join("apple-touch-icon.png").exists());
        assert!(out_dir.join("favicon-16x16.png").exists());
        assert!(out_dir.join("favicon-32x32.png").exists());
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("ico")
            .arg("data/input/input.cur")
            .assert()
            .success();
        assert!(out_dir.join("android-chrome-192x192.png").exists());
        assert!(out_dir.join("android-chrome-512x512.png").exists());
        assert!(out_dir.join("apple-touch-icon.png").exists());
        assert!(out_dir.join("favicon-16x16.png").exists());
        assert!(out_dir.join("favicon-32x32.png").exists());
        assert!(out_dir.join("favicon.ico").exists());
    }
}

#[test]
fn generate_from_ico() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.ico")
            .assert()
            .success();
        assert!(out_dir.join("android-chrome-192x192.png").exists());
        assert!(out_dir.join("android-chrome-512x512.png").exists());
        assert!(out_dir.join("apple-touch-icon.png").exists());
        assert!(out_dir.join("favicon-16x16.png").exists());
        assert!(out_dir.join("favicon-32x32.png").exists());
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.ico"))
            .assert()
            .success();
        assert!(out_dir.join("android-chrome-192x192.png").exists());
        assert!(out_dir.join("android-chrome-512x512.png").exists());
        assert!(out_dir.join("apple-touch-icon.png").exists());
        assert!(out_dir.join("favicon-16x16.png").exists());
        assert!(out_dir.join("favicon-32x32.png").exists());
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("ico")
            .arg("data/input/input.ico")
            .assert()
            .success();
        assert!(out_dir.join("android-chrome-192x192.png").exists());
        assert!(out_dir.join("android-chrome-512x512.png").exists());
        assert!(out_dir.join("apple-touch-icon.png").exists());
        assert!(out_dir.join("favicon-16x16.png").exists());
        assert!(out_dir.join("favicon-32x32.png").exists());
        assert!(out_dir.join("favicon.ico").exists());
    }
}

#[test]
fn generate_from_ico_with_wrong_format() {
    let out_dir = tempfile::tempdir().unwrap();
    let out_dir = out_dir.path();
    utils::command::command()
        .arg("-o")
        .arg(out_dir)
        .arg("-f")
        .arg("ico")
        .arg("data/output/site.webmanifest")
        .assert()
        .failure()
        .code(65)
        .stderr(predicate::str::contains("could not read the image"));
}

#[cfg(feature = "jpeg")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_jpeg() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.jpeg")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.jpeg"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("jpeg")
            .arg("data/input/input.jpeg")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("jpeg")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "exr")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_open_exr() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.exr")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.exr"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("openexr")
            .arg("data/input/input.exr")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("openexr")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_png() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.png")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.png"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("png")
            .arg("data/input/input.png")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("png")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "pnm")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_pbm() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.pbm")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.pbm"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("pnm")
            .arg("data/input/input.pbm")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
}

#[cfg(feature = "pnm")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_pgm() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.pgm")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.pgm"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("pnm")
            .arg("data/input/input.pgm")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
}

#[cfg(feature = "pnm")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_ppm() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.ppm")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.ppm"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("pnm")
            .arg("data/input/input.ppm")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
}

#[cfg(feature = "pnm")]
#[test]
fn generate_from_pnm_with_wrong_format() {
    let out_dir = tempfile::tempdir().unwrap();
    let out_dir = out_dir.path();
    utils::command::command()
        .arg("-o")
        .arg(out_dir)
        .arg("-f")
        .arg("pnm")
        .arg("data/output/site.webmanifest")
        .assert()
        .failure()
        .code(65)
        .stderr(predicate::str::contains("could not read the image"));
}

#[cfg(feature = "qoi")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_qoi() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.qoi")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.qoi"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("qoi")
            .arg("data/input/input.qoi")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("qoi")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "tga")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_tga() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.tga")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.tga"))
            .assert()
            .failure()
            .code(69)
            .stderr(predicate::str::contains(
                "could not determine the image format",
            ));
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("tga")
            .arg("data/input/input.tga")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("tga")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(69)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "tiff")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_tiff() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.tiff")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.tiff"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("tiff")
            .arg("data/input/input.tiff")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("tiff")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[cfg(feature = "webp")]
#[test]
#[allow(clippy::too_many_lines)]
fn generate_from_web_p() {
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("data/input/input.webp")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .write_stdin(include_bytes!("data/input/input.webp"))
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }
    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("webp")
            .arg("data/input/input.webp")
            .assert()
            .success();
        assert_eq!(
            image::open(out_dir.join("android-chrome-192x192.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-192x192.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("android-chrome-512x512.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/android-chrome-512x512.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("apple-touch-icon.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/apple-touch-icon.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-16x16.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-16x16.png")
                .unwrap()
                .into_rgba8()
        );
        assert_eq!(
            image::open(out_dir.join("favicon-32x32.png"))
                .unwrap()
                .into_rgba8(),
            image::open("tests/data/output/favicon-32x32.png")
                .unwrap()
                .into_rgba8()
        );
        assert!(out_dir.join("favicon.ico").exists());
    }

    {
        let out_dir = tempfile::tempdir().unwrap();
        let out_dir = out_dir.path();
        utils::command::command()
            .arg("-o")
            .arg(out_dir)
            .arg("-f")
            .arg("webp")
            .arg("data/output/site.webmanifest")
            .assert()
            .failure()
            .code(65)
            .stderr(predicate::str::contains("could not read the image"));
    }
}

#[test]
fn generate_from_invalid_input_format() {
    let out_dir = tempfile::tempdir().unwrap();
    let out_dir = out_dir.path();
    utils::command::command()
        .arg("-o")
        .arg(out_dir)
        .arg("--filter")
        .arg("nearest")
        .arg("-f")
        .arg("a")
        .arg("data/input/input.png")
        .assert()
        .failure()
        .code(2)
        .stderr(predicate::str::contains(
            "invalid value 'a' for '--format <FORMAT>'",
        ));
}
